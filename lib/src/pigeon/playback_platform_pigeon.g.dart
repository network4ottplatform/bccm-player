// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum BufferMode {
  standard,
  fastStartShortForm,
}

enum RepeatMode {
  off,
  one,
}

enum PlaybackState {
  stopped,
  paused,
  playing,
}

enum CastConnectionState {
  none,
  noDevicesAvailable,
  notConnected,
  connecting,
  connected,
}

enum TrackType {
  audio,
  text,
  video,
}

class NpawConfig {
  NpawConfig({
    this.appName,
    this.appReleaseVersion,
    this.accountCode,
    this.deviceIsAnonymous,
  });

  String? appName;

  String? appReleaseVersion;

  String? accountCode;

  bool? deviceIsAnonymous;

  Object encode() {
    return <Object?>[
      appName,
      appReleaseVersion,
      accountCode,
      deviceIsAnonymous,
    ];
  }

  static NpawConfig decode(Object result) {
    result as List<Object?>;
    return NpawConfig(
      appName: result[0] as String?,
      appReleaseVersion: result[1] as String?,
      accountCode: result[2] as String?,
      deviceIsAnonymous: result[3] as bool?,
    );
  }
}

class AppConfig {
  AppConfig({
    this.appLanguage,
    required this.audioLanguages,
    required this.subtitleLanguages,
    this.analyticsId,
    this.sessionId,
  });

  String? appLanguage;

  List<String?> audioLanguages;

  List<String?> subtitleLanguages;

  String? analyticsId;

  int? sessionId;

  Object encode() {
    return <Object?>[
      appLanguage,
      audioLanguages,
      subtitleLanguages,
      analyticsId,
      sessionId,
    ];
  }

  static AppConfig decode(Object result) {
    result as List<Object?>;
    return AppConfig(
      appLanguage: result[0] as String?,
      audioLanguages: (result[1] as List<Object?>?)!.cast<String?>(),
      subtitleLanguages: (result[2] as List<Object?>?)!.cast<String?>(),
      analyticsId: result[3] as String?,
      sessionId: result[4] as int?,
    );
  }
}

class MediaItem {
  MediaItem({
    this.url,
    this.mimeType,
    this.metadata,
    this.drm,
    this.castUrl,
    this.castMimeType,
    this.isLive,
    this.isOffline,
    this.playbackStartPositionMs,
    this.lastKnownAudioLanguage,
    this.lastKnownSubtitleLanguage,
  });

  String? url;

  String? mimeType;

  MediaMetadata? metadata;

  MediaDrmConfiguration? drm;

  String? castUrl;

  String? castMimeType;

  bool? isLive;

  bool? isOffline;

  double? playbackStartPositionMs;

  String? lastKnownAudioLanguage;

  String? lastKnownSubtitleLanguage;

  Object encode() {
    return <Object?>[
      url,
      mimeType,
      metadata?.encode(),
      drm?.encode(),
      castUrl,
      castMimeType,
      isLive,
      isOffline,
      playbackStartPositionMs,
      lastKnownAudioLanguage,
      lastKnownSubtitleLanguage,
    ];
  }

  static MediaItem decode(Object result) {
    result as List<Object?>;
    return MediaItem(
      url: result[0] as String?,
      mimeType: result[1] as String?,
      metadata: result[2] != null
          ? MediaMetadata.decode(result[2]! as List<Object?>)
          : null,
      drm: result[3] != null
          ? MediaDrmConfiguration.decode(result[3]! as List<Object?>)
          : null,
      castUrl: result[4] as String?,
      castMimeType: result[5] as String?,
      isLive: result[6] as bool?,
      isOffline: result[7] as bool?,
      playbackStartPositionMs: result[8] as double?,
      lastKnownAudioLanguage: result[9] as String?,
      lastKnownSubtitleLanguage: result[10] as String?,
    );
  }
}

class MediaMetadata {
  MediaMetadata({
    this.artworkUri,
    this.title,
    this.artist,
    this.durationMs,
    this.extras,
  });

  String? artworkUri;

  String? title;

  String? artist;

  double? durationMs;

  Map<String?, String?>? extras;

  Object encode() {
    return <Object?>[
      artworkUri,
      title,
      artist,
      durationMs,
      extras,
    ];
  }

  static MediaMetadata decode(Object result) {
    result as List<Object?>;
    return MediaMetadata(
      artworkUri: result[0] as String?,
      title: result[1] as String?,
      artist: result[2] as String?,
      durationMs: result[3] as double?,
      extras: (result[4] as Map<Object?, Object?>?)?.cast<String?, String?>(),
    );
  }
}

class PlayerStateSnapshot {
  PlayerStateSnapshot({
    required this.playerId,
    required this.playbackState,
    required this.isBuffering,
    required this.isFullscreen,
    required this.playbackSpeed,
    this.videoSize,
    this.currentMediaItem,
    this.playbackPositionMs,
    this.textureId,
    this.volume,
    this.error,
  });

  String playerId;

  PlaybackState playbackState;

  bool isBuffering;

  bool isFullscreen;

  double playbackSpeed;

  VideoSize? videoSize;

  MediaItem? currentMediaItem;

  double? playbackPositionMs;

  int? textureId;

  double? volume;

  PlayerError? error;

  Object encode() {
    return <Object?>[
      playerId,
      playbackState.index,
      isBuffering,
      isFullscreen,
      playbackSpeed,
      videoSize?.encode(),
      currentMediaItem?.encode(),
      playbackPositionMs,
      textureId,
      volume,
      error?.encode(),
    ];
  }

  static PlayerStateSnapshot decode(Object result) {
    result as List<Object?>;
    return PlayerStateSnapshot(
      playerId: result[0]! as String,
      playbackState: PlaybackState.values[result[1]! as int],
      isBuffering: result[2]! as bool,
      isFullscreen: result[3]! as bool,
      playbackSpeed: result[4]! as double,
      videoSize: result[5] != null
          ? VideoSize.decode(result[5]! as List<Object?>)
          : null,
      currentMediaItem: result[6] != null
          ? MediaItem.decode(result[6]! as List<Object?>)
          : null,
      playbackPositionMs: result[7] as double?,
      textureId: result[8] as int?,
      volume: result[9] as double?,
      error: result[10] != null
          ? PlayerError.decode(result[10]! as List<Object?>)
          : null,
    );
  }
}

class PlayerError {
  PlayerError({
    this.code,
    this.message,
  });

  String? code;

  String? message;

  Object encode() {
    return <Object?>[
      code,
      message,
    ];
  }

  static PlayerError decode(Object result) {
    result as List<Object?>;
    return PlayerError(
      code: result[0] as String?,
      message: result[1] as String?,
    );
  }
}

class VideoSize {
  VideoSize({
    required this.width,
    required this.height,
  });

  int width;

  int height;

  Object encode() {
    return <Object?>[
      width,
      height,
    ];
  }

  static VideoSize decode(Object result) {
    result as List<Object?>;
    return VideoSize(
      width: result[0]! as int,
      height: result[1]! as int,
    );
  }
}

class ChromecastState {
  ChromecastState({
    required this.connectionState,
    this.mediaItem,
  });

  CastConnectionState connectionState;

  MediaItem? mediaItem;

  Object encode() {
    return <Object?>[
      connectionState.index,
      mediaItem?.encode(),
    ];
  }

  static ChromecastState decode(Object result) {
    result as List<Object?>;
    return ChromecastState(
      connectionState: CastConnectionState.values[result[0]! as int],
      mediaItem: result[1] != null
          ? MediaItem.decode(result[1]! as List<Object?>)
          : null,
    );
  }
}

class MediaInfo {
  MediaInfo({
    required this.audioTracks,
    required this.textTracks,
    required this.videoTracks,
  });

  List<Track?> audioTracks;

  List<Track?> textTracks;

  List<Track?> videoTracks;

  Object encode() {
    return <Object?>[
      audioTracks,
      textTracks,
      videoTracks,
    ];
  }

  static MediaInfo decode(Object result) {
    result as List<Object?>;
    return MediaInfo(
      audioTracks: (result[0] as List<Object?>?)!.cast<Track?>(),
      textTracks: (result[1] as List<Object?>?)!.cast<Track?>(),
      videoTracks: (result[2] as List<Object?>?)!.cast<Track?>(),
    );
  }
}

class PlayerTracksSnapshot {
  PlayerTracksSnapshot({
    required this.playerId,
    required this.audioTracks,
    required this.textTracks,
    required this.videoTracks,
  });

  String playerId;

  List<Track?> audioTracks;

  List<Track?> textTracks;

  List<Track?> videoTracks;

  Object encode() {
    return <Object?>[
      playerId,
      audioTracks,
      textTracks,
      videoTracks,
    ];
  }

  static PlayerTracksSnapshot decode(Object result) {
    result as List<Object?>;
    return PlayerTracksSnapshot(
      playerId: result[0]! as String,
      audioTracks: (result[1] as List<Object?>?)!.cast<Track?>(),
      textTracks: (result[2] as List<Object?>?)!.cast<Track?>(),
      videoTracks: (result[3] as List<Object?>?)!.cast<Track?>(),
    );
  }
}

class Track {
  Track({
    required this.id,
    this.label,
    this.language,
    this.frameRate,
    this.bitrate,
    this.width,
    this.height,
    this.downloaded,
    required this.isSelected,
  });

  String id;

  String? label;

  String? language;

  double? frameRate;

  int? bitrate;

  int? width;

  int? height;

  bool? downloaded;

  bool isSelected;

  Object encode() {
    return <Object?>[
      id,
      label,
      language,
      frameRate,
      bitrate,
      width,
      height,
      downloaded,
      isSelected,
    ];
  }

  static Track decode(Object result) {
    result as List<Object?>;
    return Track(
      id: result[0]! as String,
      label: result[1] as String?,
      language: result[2] as String?,
      frameRate: result[3] as double?,
      bitrate: result[4] as int?,
      width: result[5] as int?,
      height: result[6] as int?,
      downloaded: result[7] as bool?,
      isSelected: result[8]! as bool,
    );
  }
}

class PrimaryPlayerChangedEvent {
  PrimaryPlayerChangedEvent({
    this.playerId,
  });

  String? playerId;

  Object encode() {
    return <Object?>[
      playerId,
    ];
  }

  static PrimaryPlayerChangedEvent decode(Object result) {
    result as List<Object?>;
    return PrimaryPlayerChangedEvent(
      playerId: result[0] as String?,
    );
  }
}

class PlayerStateUpdateEvent {
  PlayerStateUpdateEvent({
    required this.playerId,
    required this.snapshot,
  });

  String playerId;

  PlayerStateSnapshot snapshot;

  Object encode() {
    return <Object?>[
      playerId,
      snapshot.encode(),
    ];
  }

  static PlayerStateUpdateEvent decode(Object result) {
    result as List<Object?>;
    return PlayerStateUpdateEvent(
      playerId: result[0]! as String,
      snapshot: PlayerStateSnapshot.decode(result[1]! as List<Object?>),
    );
  }
}

class PositionDiscontinuityEvent {
  PositionDiscontinuityEvent({
    required this.playerId,
    this.playbackPositionMs,
  });

  String playerId;

  double? playbackPositionMs;

  Object encode() {
    return <Object?>[
      playerId,
      playbackPositionMs,
    ];
  }

  static PositionDiscontinuityEvent decode(Object result) {
    result as List<Object?>;
    return PositionDiscontinuityEvent(
      playerId: result[0]! as String,
      playbackPositionMs: result[1] as double?,
    );
  }
}

class PlaybackStateChangedEvent {
  PlaybackStateChangedEvent({
    required this.playerId,
    required this.playbackState,
    required this.isBuffering,
  });

  String playerId;

  PlaybackState playbackState;

  bool isBuffering;

  Object encode() {
    return <Object?>[
      playerId,
      playbackState.index,
      isBuffering,
    ];
  }

  static PlaybackStateChangedEvent decode(Object result) {
    result as List<Object?>;
    return PlaybackStateChangedEvent(
      playerId: result[0]! as String,
      playbackState: PlaybackState.values[result[1]! as int],
      isBuffering: result[2]! as bool,
    );
  }
}

class PlaybackEndedEvent {
  PlaybackEndedEvent({
    required this.playerId,
    this.mediaItem,
  });

  String playerId;

  MediaItem? mediaItem;

  Object encode() {
    return <Object?>[
      playerId,
      mediaItem?.encode(),
    ];
  }

  static PlaybackEndedEvent decode(Object result) {
    result as List<Object?>;
    return PlaybackEndedEvent(
      playerId: result[0]! as String,
      mediaItem: result[1] != null
          ? MediaItem.decode(result[1]! as List<Object?>)
          : null,
    );
  }
}

class PictureInPictureModeChangedEvent {
  PictureInPictureModeChangedEvent({
    required this.playerId,
    required this.isInPipMode,
  });

  String playerId;

  bool isInPipMode;

  Object encode() {
    return <Object?>[
      playerId,
      isInPipMode,
    ];
  }

  static PictureInPictureModeChangedEvent decode(Object result) {
    result as List<Object?>;
    return PictureInPictureModeChangedEvent(
      playerId: result[0]! as String,
      isInPipMode: result[1]! as bool,
    );
  }
}

class MediaItemTransitionEvent {
  MediaItemTransitionEvent({
    required this.playerId,
    this.mediaItem,
  });

  String playerId;

  MediaItem? mediaItem;

  Object encode() {
    return <Object?>[
      playerId,
      mediaItem?.encode(),
    ];
  }

  static MediaItemTransitionEvent decode(Object result) {
    result as List<Object?>;
    return MediaItemTransitionEvent(
      playerId: result[0]! as String,
      mediaItem: result[1] != null
          ? MediaItem.decode(result[1]! as List<Object?>)
          : null,
    );
  }
}

class MediaDrmConfiguration {
  MediaDrmConfiguration({
    required this.licenseUrl,
    this.certificateUrl,
    required this.headers,
  });

  String licenseUrl;

  String? certificateUrl;

  Map<String?, String?> headers;

  Object encode() {
    return <Object?>[
      licenseUrl,
      certificateUrl,
      headers,
    ];
  }

  static MediaDrmConfiguration decode(Object result) {
    result as List<Object?>;
    return MediaDrmConfiguration(
      licenseUrl: result[0]! as String,
      certificateUrl: result[1] as String?,
      headers: (result[2] as Map<Object?, Object?>?)!.cast<String?, String?>(),
    );
  }
}

class _PlaybackPlatformPigeonCodec extends StandardMessageCodec {
  const _PlaybackPlatformPigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AppConfig) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ChromecastState) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is MediaDrmConfiguration) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is MediaInfo) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is MediaItem) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is MediaMetadata) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is NpawConfig) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is PlayerError) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is PlayerStateSnapshot) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is PlayerTracksSnapshot) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is Track) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is VideoSize) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AppConfig.decode(readValue(buffer)!);
      case 129: 
        return ChromecastState.decode(readValue(buffer)!);
      case 130: 
        return MediaDrmConfiguration.decode(readValue(buffer)!);
      case 131: 
        return MediaInfo.decode(readValue(buffer)!);
      case 132: 
        return MediaItem.decode(readValue(buffer)!);
      case 133: 
        return MediaMetadata.decode(readValue(buffer)!);
      case 134: 
        return NpawConfig.decode(readValue(buffer)!);
      case 135: 
        return PlayerError.decode(readValue(buffer)!);
      case 136: 
        return PlayerStateSnapshot.decode(readValue(buffer)!);
      case 137: 
        return PlayerTracksSnapshot.decode(readValue(buffer)!);
      case 138: 
        return Track.decode(readValue(buffer)!);
      case 139: 
        return VideoSize.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// The main interface, used by the flutter side to control the player.
class PlaybackPlatformPigeon {
  /// Constructor for [PlaybackPlatformPigeon].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PlaybackPlatformPigeon({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _PlaybackPlatformPigeonCodec();

  Future<void> attach() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.attach', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> newPlayer(BufferMode? arg_bufferMode, bool? arg_disableNpaw) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.newPlayer', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_bufferMode?.index, arg_disableNpaw]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<int> createVideoTexture() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.createVideoTexture', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<bool> disposeVideoTexture(int arg_textureId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.disposeVideoTexture', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_textureId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<int> switchToVideoTexture(String arg_playerId, int arg_textureId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.switchToVideoTexture', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_playerId, arg_textureId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<bool> disposePlayer(String arg_playerId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.disposePlayer', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_playerId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<void> queueMediaItem(String arg_playerId, MediaItem arg_mediaItem) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.queueMediaItem', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_playerId, arg_mediaItem]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> replaceCurrentMediaItem(String arg_playerId, MediaItem arg_mediaItem, bool? arg_playbackPositionFromPrimary, bool? arg_autoplay) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.replaceCurrentMediaItem', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_playerId, arg_mediaItem, arg_playbackPositionFromPrimary, arg_autoplay]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setPlayerViewVisibility(int arg_viewId, bool arg_visible) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setPlayerViewVisibility', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_viewId, arg_visible]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setPrimary(String arg_id) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setPrimary', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> play(String arg_playerId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.play', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_playerId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> seekTo(String arg_playerId, double arg_positionMs) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.seekTo', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_playerId, arg_positionMs]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> pause(String arg_playerId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.pause', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_playerId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stop(String arg_playerId, bool arg_reset) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.stop', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_playerId, arg_reset]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setVolume(String arg_playerId, double arg_volume) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setVolume', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_playerId, arg_volume]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setRepeatMode(String arg_playerId, RepeatMode arg_repeatMode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setRepeatMode', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_playerId, arg_repeatMode.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setSelectedTrack(String arg_playerId, TrackType arg_type, String? arg_trackId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setSelectedTrack', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_playerId, arg_type.index, arg_trackId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setPlaybackSpeed(String arg_playerId, double arg_speed) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setPlaybackSpeed', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_playerId, arg_speed]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> exitFullscreen(String arg_playerId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.exitFullscreen', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_playerId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> enterFullscreen(String arg_playerId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.enterFullscreen', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_playerId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setMixWithOthers(String arg_playerId, bool arg_mixWithOthers) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setMixWithOthers', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_playerId, arg_mixWithOthers]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setNpawConfig(NpawConfig? arg_config) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setNpawConfig', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_config]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setAppConfig(AppConfig? arg_config) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setAppConfig', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_config]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PlayerTracksSnapshot?> getTracks(String? arg_playerId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getTracks', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_playerId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as PlayerTracksSnapshot?);
    }
  }

  Future<PlayerStateSnapshot?> getPlayerState(String? arg_playerId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getPlayerState', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_playerId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as PlayerStateSnapshot?);
    }
  }

  Future<ChromecastState?> getChromecastState() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getChromecastState', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as ChromecastState?);
    }
  }

  Future<void> openExpandedCastController() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.openExpandedCastController', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> openCastDialog() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.openCastDialog', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<MediaInfo> fetchMediaInfo(String arg_url, String? arg_mimeType) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.fetchMediaInfo', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_url, arg_mimeType]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MediaInfo?)!;
    }
  }

  Future<int> getAndroidPerformanceClass() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getAndroidPerformanceClass', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }
}

class _PlaybackListenerPigeonCodec extends StandardMessageCodec {
  const _PlaybackListenerPigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is MediaDrmConfiguration) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is MediaItem) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is MediaItemTransitionEvent) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is MediaMetadata) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is PictureInPictureModeChangedEvent) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is PlaybackEndedEvent) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is PlaybackStateChangedEvent) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is PlayerError) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is PlayerStateSnapshot) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is PlayerStateUpdateEvent) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is PositionDiscontinuityEvent) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is PrimaryPlayerChangedEvent) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is VideoSize) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return MediaDrmConfiguration.decode(readValue(buffer)!);
      case 129: 
        return MediaItem.decode(readValue(buffer)!);
      case 130: 
        return MediaItemTransitionEvent.decode(readValue(buffer)!);
      case 131: 
        return MediaMetadata.decode(readValue(buffer)!);
      case 132: 
        return PictureInPictureModeChangedEvent.decode(readValue(buffer)!);
      case 133: 
        return PlaybackEndedEvent.decode(readValue(buffer)!);
      case 134: 
        return PlaybackStateChangedEvent.decode(readValue(buffer)!);
      case 135: 
        return PlayerError.decode(readValue(buffer)!);
      case 136: 
        return PlayerStateSnapshot.decode(readValue(buffer)!);
      case 137: 
        return PlayerStateUpdateEvent.decode(readValue(buffer)!);
      case 138: 
        return PositionDiscontinuityEvent.decode(readValue(buffer)!);
      case 139: 
        return PrimaryPlayerChangedEvent.decode(readValue(buffer)!);
      case 140: 
        return VideoSize.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

////////////////// Playback Listener
abstract class PlaybackListenerPigeon {
  static const MessageCodec<Object?> codec = _PlaybackListenerPigeonCodec();

  void onPrimaryPlayerChanged(PrimaryPlayerChangedEvent event);

  void onPositionDiscontinuity(PositionDiscontinuityEvent event);

  void onPlayerStateUpdate(PlayerStateUpdateEvent event);

  void onPlaybackStateChanged(PlaybackStateChangedEvent event);

  void onPlaybackEnded(PlaybackEndedEvent event);

  void onMediaItemTransition(MediaItemTransitionEvent event);

  void onPictureInPictureModeChanged(PictureInPictureModeChangedEvent event);

  static void setup(PlaybackListenerPigeon? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPrimaryPlayerChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPrimaryPlayerChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PrimaryPlayerChangedEvent? arg_event = (args[0] as PrimaryPlayerChangedEvent?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPrimaryPlayerChanged was null, expected non-null PrimaryPlayerChangedEvent.');
          api.onPrimaryPlayerChanged(arg_event!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPositionDiscontinuity', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPositionDiscontinuity was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PositionDiscontinuityEvent? arg_event = (args[0] as PositionDiscontinuityEvent?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPositionDiscontinuity was null, expected non-null PositionDiscontinuityEvent.');
          api.onPositionDiscontinuity(arg_event!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlayerStateUpdate', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlayerStateUpdate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PlayerStateUpdateEvent? arg_event = (args[0] as PlayerStateUpdateEvent?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlayerStateUpdate was null, expected non-null PlayerStateUpdateEvent.');
          api.onPlayerStateUpdate(arg_event!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlaybackStateChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlaybackStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PlaybackStateChangedEvent? arg_event = (args[0] as PlaybackStateChangedEvent?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlaybackStateChanged was null, expected non-null PlaybackStateChangedEvent.');
          api.onPlaybackStateChanged(arg_event!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlaybackEnded', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlaybackEnded was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PlaybackEndedEvent? arg_event = (args[0] as PlaybackEndedEvent?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlaybackEnded was null, expected non-null PlaybackEndedEvent.');
          api.onPlaybackEnded(arg_event!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onMediaItemTransition', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onMediaItemTransition was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MediaItemTransitionEvent? arg_event = (args[0] as MediaItemTransitionEvent?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onMediaItemTransition was null, expected non-null MediaItemTransitionEvent.');
          api.onMediaItemTransition(arg_event!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPictureInPictureModeChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPictureInPictureModeChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PictureInPictureModeChangedEvent? arg_event = (args[0] as PictureInPictureModeChangedEvent?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPictureInPictureModeChanged was null, expected non-null PictureInPictureModeChangedEvent.');
          api.onPictureInPictureModeChanged(arg_event!);
          return;
        });
      }
    }
  }
}
