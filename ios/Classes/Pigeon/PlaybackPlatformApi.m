// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "PlaybackPlatformApi.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

@implementation BufferModeBox
- (instancetype)initWithValue:(BufferMode)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation RepeatModeBox
- (instancetype)initWithValue:(RepeatMode)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation PlaybackStateBox
- (instancetype)initWithValue:(PlaybackState)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation CastConnectionStateBox
- (instancetype)initWithValue:(CastConnectionState)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation TrackTypeBox
- (instancetype)initWithValue:(TrackType)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface NpawConfig ()
+ (NpawConfig *)fromList:(NSArray *)list;
+ (nullable NpawConfig *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AppConfig ()
+ (AppConfig *)fromList:(NSArray *)list;
+ (nullable AppConfig *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface MediaItem ()
+ (MediaItem *)fromList:(NSArray *)list;
+ (nullable MediaItem *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface MediaMetadata ()
+ (MediaMetadata *)fromList:(NSArray *)list;
+ (nullable MediaMetadata *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PlayerStateSnapshot ()
+ (PlayerStateSnapshot *)fromList:(NSArray *)list;
+ (nullable PlayerStateSnapshot *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PlayerError ()
+ (PlayerError *)fromList:(NSArray *)list;
+ (nullable PlayerError *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface VideoSize ()
+ (VideoSize *)fromList:(NSArray *)list;
+ (nullable VideoSize *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface ChromecastState ()
+ (ChromecastState *)fromList:(NSArray *)list;
+ (nullable ChromecastState *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface MediaInfo ()
+ (MediaInfo *)fromList:(NSArray *)list;
+ (nullable MediaInfo *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PlayerTracksSnapshot ()
+ (PlayerTracksSnapshot *)fromList:(NSArray *)list;
+ (nullable PlayerTracksSnapshot *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface Track ()
+ (Track *)fromList:(NSArray *)list;
+ (nullable Track *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PrimaryPlayerChangedEvent ()
+ (PrimaryPlayerChangedEvent *)fromList:(NSArray *)list;
+ (nullable PrimaryPlayerChangedEvent *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PlayerStateUpdateEvent ()
+ (PlayerStateUpdateEvent *)fromList:(NSArray *)list;
+ (nullable PlayerStateUpdateEvent *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PositionDiscontinuityEvent ()
+ (PositionDiscontinuityEvent *)fromList:(NSArray *)list;
+ (nullable PositionDiscontinuityEvent *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PlaybackStateChangedEvent ()
+ (PlaybackStateChangedEvent *)fromList:(NSArray *)list;
+ (nullable PlaybackStateChangedEvent *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PlaybackEndedEvent ()
+ (PlaybackEndedEvent *)fromList:(NSArray *)list;
+ (nullable PlaybackEndedEvent *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PictureInPictureModeChangedEvent ()
+ (PictureInPictureModeChangedEvent *)fromList:(NSArray *)list;
+ (nullable PictureInPictureModeChangedEvent *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface MediaItemTransitionEvent ()
+ (MediaItemTransitionEvent *)fromList:(NSArray *)list;
+ (nullable MediaItemTransitionEvent *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface MediaDrmConfiguration ()
+ (MediaDrmConfiguration *)fromList:(NSArray *)list;
+ (nullable MediaDrmConfiguration *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation NpawConfig
+ (instancetype)makeWithAppName:(nullable NSString *)appName
    appReleaseVersion:(nullable NSString *)appReleaseVersion
    accountCode:(nullable NSString *)accountCode
    deviceIsAnonymous:(nullable NSNumber *)deviceIsAnonymous {
  NpawConfig* pigeonResult = [[NpawConfig alloc] init];
  pigeonResult.appName = appName;
  pigeonResult.appReleaseVersion = appReleaseVersion;
  pigeonResult.accountCode = accountCode;
  pigeonResult.deviceIsAnonymous = deviceIsAnonymous;
  return pigeonResult;
}
+ (NpawConfig *)fromList:(NSArray *)list {
  NpawConfig *pigeonResult = [[NpawConfig alloc] init];
  pigeonResult.appName = GetNullableObjectAtIndex(list, 0);
  pigeonResult.appReleaseVersion = GetNullableObjectAtIndex(list, 1);
  pigeonResult.accountCode = GetNullableObjectAtIndex(list, 2);
  pigeonResult.deviceIsAnonymous = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable NpawConfig *)nullableFromList:(NSArray *)list {
  return (list) ? [NpawConfig fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.appName ?: [NSNull null]),
    (self.appReleaseVersion ?: [NSNull null]),
    (self.accountCode ?: [NSNull null]),
    (self.deviceIsAnonymous ?: [NSNull null]),
  ];
}
@end

@implementation AppConfig
+ (instancetype)makeWithAppLanguage:(nullable NSString *)appLanguage
    audioLanguages:(NSArray<NSString *> *)audioLanguages
    subtitleLanguages:(NSArray<NSString *> *)subtitleLanguages
    analyticsId:(nullable NSString *)analyticsId
    sessionId:(nullable NSNumber *)sessionId {
  AppConfig* pigeonResult = [[AppConfig alloc] init];
  pigeonResult.appLanguage = appLanguage;
  pigeonResult.audioLanguages = audioLanguages;
  pigeonResult.subtitleLanguages = subtitleLanguages;
  pigeonResult.analyticsId = analyticsId;
  pigeonResult.sessionId = sessionId;
  return pigeonResult;
}
+ (AppConfig *)fromList:(NSArray *)list {
  AppConfig *pigeonResult = [[AppConfig alloc] init];
  pigeonResult.appLanguage = GetNullableObjectAtIndex(list, 0);
  pigeonResult.audioLanguages = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.audioLanguages != nil, @"");
  pigeonResult.subtitleLanguages = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.subtitleLanguages != nil, @"");
  pigeonResult.analyticsId = GetNullableObjectAtIndex(list, 3);
  pigeonResult.sessionId = GetNullableObjectAtIndex(list, 4);
  return pigeonResult;
}
+ (nullable AppConfig *)nullableFromList:(NSArray *)list {
  return (list) ? [AppConfig fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.appLanguage ?: [NSNull null]),
    (self.audioLanguages ?: [NSNull null]),
    (self.subtitleLanguages ?: [NSNull null]),
    (self.analyticsId ?: [NSNull null]),
    (self.sessionId ?: [NSNull null]),
  ];
}
@end

@implementation MediaItem
+ (instancetype)makeWithUrl:(nullable NSString *)url
    mimeType:(nullable NSString *)mimeType
    metadata:(nullable MediaMetadata *)metadata
    drm:(nullable MediaDrmConfiguration *)drm
    isLive:(nullable NSNumber *)isLive
    isOffline:(nullable NSNumber *)isOffline
    playbackStartPositionMs:(nullable NSNumber *)playbackStartPositionMs
    lastKnownAudioLanguage:(nullable NSString *)lastKnownAudioLanguage
    lastKnownSubtitleLanguage:(nullable NSString *)lastKnownSubtitleLanguage {
  MediaItem* pigeonResult = [[MediaItem alloc] init];
  pigeonResult.url = url;
  pigeonResult.mimeType = mimeType;
  pigeonResult.metadata = metadata;
  pigeonResult.drm = drm;
  pigeonResult.isLive = isLive;
  pigeonResult.isOffline = isOffline;
  pigeonResult.playbackStartPositionMs = playbackStartPositionMs;
  pigeonResult.lastKnownAudioLanguage = lastKnownAudioLanguage;
  pigeonResult.lastKnownSubtitleLanguage = lastKnownSubtitleLanguage;
  return pigeonResult;
}
+ (MediaItem *)fromList:(NSArray *)list {
  MediaItem *pigeonResult = [[MediaItem alloc] init];
  pigeonResult.url = GetNullableObjectAtIndex(list, 0);
  pigeonResult.mimeType = GetNullableObjectAtIndex(list, 1);
  pigeonResult.metadata = [MediaMetadata nullableFromList:(GetNullableObjectAtIndex(list, 2))];
  pigeonResult.drm = [MediaDrmConfiguration nullableFromList:(GetNullableObjectAtIndex(list, 3))];
  pigeonResult.isLive = GetNullableObjectAtIndex(list, 4);
  pigeonResult.isOffline = GetNullableObjectAtIndex(list, 5);
  pigeonResult.playbackStartPositionMs = GetNullableObjectAtIndex(list, 6);
  pigeonResult.lastKnownAudioLanguage = GetNullableObjectAtIndex(list, 7);
  pigeonResult.lastKnownSubtitleLanguage = GetNullableObjectAtIndex(list, 8);
  return pigeonResult;
}
+ (nullable MediaItem *)nullableFromList:(NSArray *)list {
  return (list) ? [MediaItem fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.url ?: [NSNull null]),
    (self.mimeType ?: [NSNull null]),
    (self.metadata ? [self.metadata toList] : [NSNull null]),
    (self.drm ? [self.drm toList] : [NSNull null]),
    (self.isLive ?: [NSNull null]),
    (self.isOffline ?: [NSNull null]),
    (self.playbackStartPositionMs ?: [NSNull null]),
    (self.lastKnownAudioLanguage ?: [NSNull null]),
    (self.lastKnownSubtitleLanguage ?: [NSNull null]),
  ];
}
@end

@implementation MediaMetadata
+ (instancetype)makeWithArtworkUri:(nullable NSString *)artworkUri
    title:(nullable NSString *)title
    artist:(nullable NSString *)artist
    durationMs:(nullable NSNumber *)durationMs
    extras:(nullable NSDictionary<NSString *, NSString *> *)extras {
  MediaMetadata* pigeonResult = [[MediaMetadata alloc] init];
  pigeonResult.artworkUri = artworkUri;
  pigeonResult.title = title;
  pigeonResult.artist = artist;
  pigeonResult.durationMs = durationMs;
  pigeonResult.extras = extras;
  return pigeonResult;
}
+ (MediaMetadata *)fromList:(NSArray *)list {
  MediaMetadata *pigeonResult = [[MediaMetadata alloc] init];
  pigeonResult.artworkUri = GetNullableObjectAtIndex(list, 0);
  pigeonResult.title = GetNullableObjectAtIndex(list, 1);
  pigeonResult.artist = GetNullableObjectAtIndex(list, 2);
  pigeonResult.durationMs = GetNullableObjectAtIndex(list, 3);
  pigeonResult.extras = GetNullableObjectAtIndex(list, 4);
  return pigeonResult;
}
+ (nullable MediaMetadata *)nullableFromList:(NSArray *)list {
  return (list) ? [MediaMetadata fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.artworkUri ?: [NSNull null]),
    (self.title ?: [NSNull null]),
    (self.artist ?: [NSNull null]),
    (self.durationMs ?: [NSNull null]),
    (self.extras ?: [NSNull null]),
  ];
}
@end

@implementation PlayerStateSnapshot
+ (instancetype)makeWithPlayerId:(NSString *)playerId
    playbackState:(PlaybackState)playbackState
    isBuffering:(NSNumber *)isBuffering
    isFullscreen:(NSNumber *)isFullscreen
    playbackSpeed:(NSNumber *)playbackSpeed
    videoSize:(nullable VideoSize *)videoSize
    currentMediaItem:(nullable MediaItem *)currentMediaItem
    playbackPositionMs:(nullable NSNumber *)playbackPositionMs
    textureId:(nullable NSNumber *)textureId
    volume:(nullable NSNumber *)volume
    error:(nullable PlayerError *)error {
  PlayerStateSnapshot* pigeonResult = [[PlayerStateSnapshot alloc] init];
  pigeonResult.playerId = playerId;
  pigeonResult.playbackState = playbackState;
  pigeonResult.isBuffering = isBuffering;
  pigeonResult.isFullscreen = isFullscreen;
  pigeonResult.playbackSpeed = playbackSpeed;
  pigeonResult.videoSize = videoSize;
  pigeonResult.currentMediaItem = currentMediaItem;
  pigeonResult.playbackPositionMs = playbackPositionMs;
  pigeonResult.textureId = textureId;
  pigeonResult.volume = volume;
  pigeonResult.error = error;
  return pigeonResult;
}
+ (PlayerStateSnapshot *)fromList:(NSArray *)list {
  PlayerStateSnapshot *pigeonResult = [[PlayerStateSnapshot alloc] init];
  pigeonResult.playerId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.playerId != nil, @"");
  pigeonResult.playbackState = [GetNullableObjectAtIndex(list, 1) integerValue];
  pigeonResult.isBuffering = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.isBuffering != nil, @"");
  pigeonResult.isFullscreen = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.isFullscreen != nil, @"");
  pigeonResult.playbackSpeed = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.playbackSpeed != nil, @"");
  pigeonResult.videoSize = [VideoSize nullableFromList:(GetNullableObjectAtIndex(list, 5))];
  pigeonResult.currentMediaItem = [MediaItem nullableFromList:(GetNullableObjectAtIndex(list, 6))];
  pigeonResult.playbackPositionMs = GetNullableObjectAtIndex(list, 7);
  pigeonResult.textureId = GetNullableObjectAtIndex(list, 8);
  pigeonResult.volume = GetNullableObjectAtIndex(list, 9);
  pigeonResult.error = [PlayerError nullableFromList:(GetNullableObjectAtIndex(list, 10))];
  return pigeonResult;
}
+ (nullable PlayerStateSnapshot *)nullableFromList:(NSArray *)list {
  return (list) ? [PlayerStateSnapshot fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.playerId ?: [NSNull null]),
    @(self.playbackState),
    (self.isBuffering ?: [NSNull null]),
    (self.isFullscreen ?: [NSNull null]),
    (self.playbackSpeed ?: [NSNull null]),
    (self.videoSize ? [self.videoSize toList] : [NSNull null]),
    (self.currentMediaItem ? [self.currentMediaItem toList] : [NSNull null]),
    (self.playbackPositionMs ?: [NSNull null]),
    (self.textureId ?: [NSNull null]),
    (self.volume ?: [NSNull null]),
    (self.error ? [self.error toList] : [NSNull null]),
  ];
}
@end

@implementation PlayerError
+ (instancetype)makeWithCode:(nullable NSString *)code
    message:(nullable NSString *)message {
  PlayerError* pigeonResult = [[PlayerError alloc] init];
  pigeonResult.code = code;
  pigeonResult.message = message;
  return pigeonResult;
}
+ (PlayerError *)fromList:(NSArray *)list {
  PlayerError *pigeonResult = [[PlayerError alloc] init];
  pigeonResult.code = GetNullableObjectAtIndex(list, 0);
  pigeonResult.message = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable PlayerError *)nullableFromList:(NSArray *)list {
  return (list) ? [PlayerError fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.code ?: [NSNull null]),
    (self.message ?: [NSNull null]),
  ];
}
@end

@implementation VideoSize
+ (instancetype)makeWithWidth:(NSNumber *)width
    height:(NSNumber *)height {
  VideoSize* pigeonResult = [[VideoSize alloc] init];
  pigeonResult.width = width;
  pigeonResult.height = height;
  return pigeonResult;
}
+ (VideoSize *)fromList:(NSArray *)list {
  VideoSize *pigeonResult = [[VideoSize alloc] init];
  pigeonResult.width = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.width != nil, @"");
  pigeonResult.height = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.height != nil, @"");
  return pigeonResult;
}
+ (nullable VideoSize *)nullableFromList:(NSArray *)list {
  return (list) ? [VideoSize fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.width ?: [NSNull null]),
    (self.height ?: [NSNull null]),
  ];
}
@end

@implementation ChromecastState
+ (instancetype)makeWithConnectionState:(CastConnectionState)connectionState
    mediaItem:(nullable MediaItem *)mediaItem {
  ChromecastState* pigeonResult = [[ChromecastState alloc] init];
  pigeonResult.connectionState = connectionState;
  pigeonResult.mediaItem = mediaItem;
  return pigeonResult;
}
+ (ChromecastState *)fromList:(NSArray *)list {
  ChromecastState *pigeonResult = [[ChromecastState alloc] init];
  pigeonResult.connectionState = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.mediaItem = [MediaItem nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  return pigeonResult;
}
+ (nullable ChromecastState *)nullableFromList:(NSArray *)list {
  return (list) ? [ChromecastState fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.connectionState),
    (self.mediaItem ? [self.mediaItem toList] : [NSNull null]),
  ];
}
@end

@implementation MediaInfo
+ (instancetype)makeWithAudioTracks:(NSArray<Track *> *)audioTracks
    textTracks:(NSArray<Track *> *)textTracks
    videoTracks:(NSArray<Track *> *)videoTracks {
  MediaInfo* pigeonResult = [[MediaInfo alloc] init];
  pigeonResult.audioTracks = audioTracks;
  pigeonResult.textTracks = textTracks;
  pigeonResult.videoTracks = videoTracks;
  return pigeonResult;
}
+ (MediaInfo *)fromList:(NSArray *)list {
  MediaInfo *pigeonResult = [[MediaInfo alloc] init];
  pigeonResult.audioTracks = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.audioTracks != nil, @"");
  pigeonResult.textTracks = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.textTracks != nil, @"");
  pigeonResult.videoTracks = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.videoTracks != nil, @"");
  return pigeonResult;
}
+ (nullable MediaInfo *)nullableFromList:(NSArray *)list {
  return (list) ? [MediaInfo fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.audioTracks ?: [NSNull null]),
    (self.textTracks ?: [NSNull null]),
    (self.videoTracks ?: [NSNull null]),
  ];
}
@end

@implementation PlayerTracksSnapshot
+ (instancetype)makeWithPlayerId:(NSString *)playerId
    audioTracks:(NSArray<Track *> *)audioTracks
    textTracks:(NSArray<Track *> *)textTracks
    videoTracks:(NSArray<Track *> *)videoTracks {
  PlayerTracksSnapshot* pigeonResult = [[PlayerTracksSnapshot alloc] init];
  pigeonResult.playerId = playerId;
  pigeonResult.audioTracks = audioTracks;
  pigeonResult.textTracks = textTracks;
  pigeonResult.videoTracks = videoTracks;
  return pigeonResult;
}
+ (PlayerTracksSnapshot *)fromList:(NSArray *)list {
  PlayerTracksSnapshot *pigeonResult = [[PlayerTracksSnapshot alloc] init];
  pigeonResult.playerId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.playerId != nil, @"");
  pigeonResult.audioTracks = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.audioTracks != nil, @"");
  pigeonResult.textTracks = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.textTracks != nil, @"");
  pigeonResult.videoTracks = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.videoTracks != nil, @"");
  return pigeonResult;
}
+ (nullable PlayerTracksSnapshot *)nullableFromList:(NSArray *)list {
  return (list) ? [PlayerTracksSnapshot fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.playerId ?: [NSNull null]),
    (self.audioTracks ?: [NSNull null]),
    (self.textTracks ?: [NSNull null]),
    (self.videoTracks ?: [NSNull null]),
  ];
}
@end

@implementation Track
+ (instancetype)makeWithId:(NSString *)id
    label:(nullable NSString *)label
    language:(nullable NSString *)language
    frameRate:(nullable NSNumber *)frameRate
    bitrate:(nullable NSNumber *)bitrate
    width:(nullable NSNumber *)width
    height:(nullable NSNumber *)height
    downloaded:(nullable NSNumber *)downloaded
    isSelected:(NSNumber *)isSelected {
  Track* pigeonResult = [[Track alloc] init];
  pigeonResult.id = id;
  pigeonResult.label = label;
  pigeonResult.language = language;
  pigeonResult.frameRate = frameRate;
  pigeonResult.bitrate = bitrate;
  pigeonResult.width = width;
  pigeonResult.height = height;
  pigeonResult.downloaded = downloaded;
  pigeonResult.isSelected = isSelected;
  return pigeonResult;
}
+ (Track *)fromList:(NSArray *)list {
  Track *pigeonResult = [[Track alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.id != nil, @"");
  pigeonResult.label = GetNullableObjectAtIndex(list, 1);
  pigeonResult.language = GetNullableObjectAtIndex(list, 2);
  pigeonResult.frameRate = GetNullableObjectAtIndex(list, 3);
  pigeonResult.bitrate = GetNullableObjectAtIndex(list, 4);
  pigeonResult.width = GetNullableObjectAtIndex(list, 5);
  pigeonResult.height = GetNullableObjectAtIndex(list, 6);
  pigeonResult.downloaded = GetNullableObjectAtIndex(list, 7);
  pigeonResult.isSelected = GetNullableObjectAtIndex(list, 8);
  NSAssert(pigeonResult.isSelected != nil, @"");
  return pigeonResult;
}
+ (nullable Track *)nullableFromList:(NSArray *)list {
  return (list) ? [Track fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.id ?: [NSNull null]),
    (self.label ?: [NSNull null]),
    (self.language ?: [NSNull null]),
    (self.frameRate ?: [NSNull null]),
    (self.bitrate ?: [NSNull null]),
    (self.width ?: [NSNull null]),
    (self.height ?: [NSNull null]),
    (self.downloaded ?: [NSNull null]),
    (self.isSelected ?: [NSNull null]),
  ];
}
@end

@implementation PrimaryPlayerChangedEvent
+ (instancetype)makeWithPlayerId:(nullable NSString *)playerId {
  PrimaryPlayerChangedEvent* pigeonResult = [[PrimaryPlayerChangedEvent alloc] init];
  pigeonResult.playerId = playerId;
  return pigeonResult;
}
+ (PrimaryPlayerChangedEvent *)fromList:(NSArray *)list {
  PrimaryPlayerChangedEvent *pigeonResult = [[PrimaryPlayerChangedEvent alloc] init];
  pigeonResult.playerId = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable PrimaryPlayerChangedEvent *)nullableFromList:(NSArray *)list {
  return (list) ? [PrimaryPlayerChangedEvent fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.playerId ?: [NSNull null]),
  ];
}
@end

@implementation PlayerStateUpdateEvent
+ (instancetype)makeWithPlayerId:(NSString *)playerId
    snapshot:(PlayerStateSnapshot *)snapshot {
  PlayerStateUpdateEvent* pigeonResult = [[PlayerStateUpdateEvent alloc] init];
  pigeonResult.playerId = playerId;
  pigeonResult.snapshot = snapshot;
  return pigeonResult;
}
+ (PlayerStateUpdateEvent *)fromList:(NSArray *)list {
  PlayerStateUpdateEvent *pigeonResult = [[PlayerStateUpdateEvent alloc] init];
  pigeonResult.playerId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.playerId != nil, @"");
  pigeonResult.snapshot = [PlayerStateSnapshot nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  NSAssert(pigeonResult.snapshot != nil, @"");
  return pigeonResult;
}
+ (nullable PlayerStateUpdateEvent *)nullableFromList:(NSArray *)list {
  return (list) ? [PlayerStateUpdateEvent fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.playerId ?: [NSNull null]),
    (self.snapshot ? [self.snapshot toList] : [NSNull null]),
  ];
}
@end

@implementation PositionDiscontinuityEvent
+ (instancetype)makeWithPlayerId:(NSString *)playerId
    playbackPositionMs:(nullable NSNumber *)playbackPositionMs {
  PositionDiscontinuityEvent* pigeonResult = [[PositionDiscontinuityEvent alloc] init];
  pigeonResult.playerId = playerId;
  pigeonResult.playbackPositionMs = playbackPositionMs;
  return pigeonResult;
}
+ (PositionDiscontinuityEvent *)fromList:(NSArray *)list {
  PositionDiscontinuityEvent *pigeonResult = [[PositionDiscontinuityEvent alloc] init];
  pigeonResult.playerId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.playerId != nil, @"");
  pigeonResult.playbackPositionMs = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable PositionDiscontinuityEvent *)nullableFromList:(NSArray *)list {
  return (list) ? [PositionDiscontinuityEvent fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.playerId ?: [NSNull null]),
    (self.playbackPositionMs ?: [NSNull null]),
  ];
}
@end

@implementation PlaybackStateChangedEvent
+ (instancetype)makeWithPlayerId:(NSString *)playerId
    playbackState:(PlaybackState)playbackState
    isBuffering:(NSNumber *)isBuffering {
  PlaybackStateChangedEvent* pigeonResult = [[PlaybackStateChangedEvent alloc] init];
  pigeonResult.playerId = playerId;
  pigeonResult.playbackState = playbackState;
  pigeonResult.isBuffering = isBuffering;
  return pigeonResult;
}
+ (PlaybackStateChangedEvent *)fromList:(NSArray *)list {
  PlaybackStateChangedEvent *pigeonResult = [[PlaybackStateChangedEvent alloc] init];
  pigeonResult.playerId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.playerId != nil, @"");
  pigeonResult.playbackState = [GetNullableObjectAtIndex(list, 1) integerValue];
  pigeonResult.isBuffering = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.isBuffering != nil, @"");
  return pigeonResult;
}
+ (nullable PlaybackStateChangedEvent *)nullableFromList:(NSArray *)list {
  return (list) ? [PlaybackStateChangedEvent fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.playerId ?: [NSNull null]),
    @(self.playbackState),
    (self.isBuffering ?: [NSNull null]),
  ];
}
@end

@implementation PlaybackEndedEvent
+ (instancetype)makeWithPlayerId:(NSString *)playerId
    mediaItem:(nullable MediaItem *)mediaItem {
  PlaybackEndedEvent* pigeonResult = [[PlaybackEndedEvent alloc] init];
  pigeonResult.playerId = playerId;
  pigeonResult.mediaItem = mediaItem;
  return pigeonResult;
}
+ (PlaybackEndedEvent *)fromList:(NSArray *)list {
  PlaybackEndedEvent *pigeonResult = [[PlaybackEndedEvent alloc] init];
  pigeonResult.playerId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.playerId != nil, @"");
  pigeonResult.mediaItem = [MediaItem nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  return pigeonResult;
}
+ (nullable PlaybackEndedEvent *)nullableFromList:(NSArray *)list {
  return (list) ? [PlaybackEndedEvent fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.playerId ?: [NSNull null]),
    (self.mediaItem ? [self.mediaItem toList] : [NSNull null]),
  ];
}
@end

@implementation PictureInPictureModeChangedEvent
+ (instancetype)makeWithPlayerId:(NSString *)playerId
    isInPipMode:(NSNumber *)isInPipMode {
  PictureInPictureModeChangedEvent* pigeonResult = [[PictureInPictureModeChangedEvent alloc] init];
  pigeonResult.playerId = playerId;
  pigeonResult.isInPipMode = isInPipMode;
  return pigeonResult;
}
+ (PictureInPictureModeChangedEvent *)fromList:(NSArray *)list {
  PictureInPictureModeChangedEvent *pigeonResult = [[PictureInPictureModeChangedEvent alloc] init];
  pigeonResult.playerId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.playerId != nil, @"");
  pigeonResult.isInPipMode = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.isInPipMode != nil, @"");
  return pigeonResult;
}
+ (nullable PictureInPictureModeChangedEvent *)nullableFromList:(NSArray *)list {
  return (list) ? [PictureInPictureModeChangedEvent fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.playerId ?: [NSNull null]),
    (self.isInPipMode ?: [NSNull null]),
  ];
}
@end

@implementation MediaItemTransitionEvent
+ (instancetype)makeWithPlayerId:(NSString *)playerId
    mediaItem:(nullable MediaItem *)mediaItem {
  MediaItemTransitionEvent* pigeonResult = [[MediaItemTransitionEvent alloc] init];
  pigeonResult.playerId = playerId;
  pigeonResult.mediaItem = mediaItem;
  return pigeonResult;
}
+ (MediaItemTransitionEvent *)fromList:(NSArray *)list {
  MediaItemTransitionEvent *pigeonResult = [[MediaItemTransitionEvent alloc] init];
  pigeonResult.playerId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.playerId != nil, @"");
  pigeonResult.mediaItem = [MediaItem nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  return pigeonResult;
}
+ (nullable MediaItemTransitionEvent *)nullableFromList:(NSArray *)list {
  return (list) ? [MediaItemTransitionEvent fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.playerId ?: [NSNull null]),
    (self.mediaItem ? [self.mediaItem toList] : [NSNull null]),
  ];
}
@end

@implementation MediaDrmConfiguration
+ (instancetype)makeWithLicenseUrl:(NSString *)licenseUrl
    certificateUrl:(nullable NSString *)certificateUrl
    headers:(NSDictionary<NSString *, NSString *> *)headers {
  MediaDrmConfiguration* pigeonResult = [[MediaDrmConfiguration alloc] init];
  pigeonResult.licenseUrl = licenseUrl;
  pigeonResult.certificateUrl = certificateUrl;
  pigeonResult.headers = headers;
  return pigeonResult;
}
+ (MediaDrmConfiguration *)fromList:(NSArray *)list {
  MediaDrmConfiguration *pigeonResult = [[MediaDrmConfiguration alloc] init];
  pigeonResult.licenseUrl = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.licenseUrl != nil, @"");
  pigeonResult.certificateUrl = GetNullableObjectAtIndex(list, 1);
  pigeonResult.headers = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.headers != nil, @"");
  return pigeonResult;
}
+ (nullable MediaDrmConfiguration *)nullableFromList:(NSArray *)list {
  return (list) ? [MediaDrmConfiguration fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.licenseUrl ?: [NSNull null]),
    (self.certificateUrl ?: [NSNull null]),
    (self.headers ?: [NSNull null]),
  ];
}
@end

@interface PlaybackPlatformPigeonCodecReader : FlutterStandardReader
@end
@implementation PlaybackPlatformPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [AppConfig fromList:[self readValue]];
    case 129: 
      return [ChromecastState fromList:[self readValue]];
    case 130: 
      return [MediaDrmConfiguration fromList:[self readValue]];
    case 131: 
      return [MediaInfo fromList:[self readValue]];
    case 132: 
      return [MediaItem fromList:[self readValue]];
    case 133: 
      return [MediaMetadata fromList:[self readValue]];
    case 134: 
      return [NpawConfig fromList:[self readValue]];
    case 135: 
      return [PlayerError fromList:[self readValue]];
    case 136: 
      return [PlayerStateSnapshot fromList:[self readValue]];
    case 137: 
      return [PlayerTracksSnapshot fromList:[self readValue]];
    case 138: 
      return [Track fromList:[self readValue]];
    case 139: 
      return [VideoSize fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface PlaybackPlatformPigeonCodecWriter : FlutterStandardWriter
@end
@implementation PlaybackPlatformPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[AppConfig class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ChromecastState class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[MediaDrmConfiguration class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[MediaInfo class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[MediaItem class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[MediaMetadata class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[NpawConfig class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PlayerError class]]) {
    [self writeByte:135];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PlayerStateSnapshot class]]) {
    [self writeByte:136];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PlayerTracksSnapshot class]]) {
    [self writeByte:137];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[Track class]]) {
    [self writeByte:138];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[VideoSize class]]) {
    [self writeByte:139];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface PlaybackPlatformPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation PlaybackPlatformPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[PlaybackPlatformPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[PlaybackPlatformPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *PlaybackPlatformPigeonGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    PlaybackPlatformPigeonCodecReaderWriter *readerWriter = [[PlaybackPlatformPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void PlaybackPlatformPigeonSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PlaybackPlatformPigeon> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.attach"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(attachWithCompletion:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(attachWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api attachWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.newPlayer"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(newPlayer:disableNpaw:completion:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(newPlayer:disableNpaw:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_bufferModeAsNumber = GetNullableObjectAtIndex(args, 0);
        BufferModeBox *arg_bufferMode = arg_bufferModeAsNumber == nil ? nil : [[BufferModeBox alloc] initWithValue: [arg_bufferModeAsNumber integerValue]];
        NSNumber *arg_disableNpaw = GetNullableObjectAtIndex(args, 1);
        [api newPlayer:arg_bufferMode disableNpaw:arg_disableNpaw completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.createVideoTexture"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createVideoTexture:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(createVideoTexture:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api createVideoTexture:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.disposeVideoTexture"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disposeVideoTexture:completion:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(disposeVideoTexture:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_textureId = GetNullableObjectAtIndex(args, 0);
        [api disposeVideoTexture:arg_textureId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.switchToVideoTexture"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(switchToVideoTextureForPlayer:textureId:completion:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(switchToVideoTextureForPlayer:textureId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_playerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_textureId = GetNullableObjectAtIndex(args, 1);
        [api switchToVideoTextureForPlayer:arg_playerId textureId:arg_textureId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.disposePlayer"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disposePlayer:completion:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(disposePlayer:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_playerId = GetNullableObjectAtIndex(args, 0);
        [api disposePlayer:arg_playerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.queueMediaItem"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(queueMediaItem:mediaItem:completion:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(queueMediaItem:mediaItem:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_playerId = GetNullableObjectAtIndex(args, 0);
        MediaItem *arg_mediaItem = GetNullableObjectAtIndex(args, 1);
        [api queueMediaItem:arg_playerId mediaItem:arg_mediaItem completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.replaceCurrentMediaItem"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(replaceCurrentMediaItem:mediaItem:playbackPositionFromPrimary:autoplay:completion:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(replaceCurrentMediaItem:mediaItem:playbackPositionFromPrimary:autoplay:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_playerId = GetNullableObjectAtIndex(args, 0);
        MediaItem *arg_mediaItem = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_playbackPositionFromPrimary = GetNullableObjectAtIndex(args, 2);
        NSNumber *arg_autoplay = GetNullableObjectAtIndex(args, 3);
        [api replaceCurrentMediaItem:arg_playerId mediaItem:arg_mediaItem playbackPositionFromPrimary:arg_playbackPositionFromPrimary autoplay:arg_autoplay completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setPlayerViewVisibility"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setPlayerViewVisibility:visible:error:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(setPlayerViewVisibility:visible:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_viewId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_visible = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setPlayerViewVisibility:arg_viewId visible:arg_visible error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setPrimary"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setPrimary:completion:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(setPrimary:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        [api setPrimary:arg_id completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.play"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(play:error:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(play:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_playerId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api play:arg_playerId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.seekTo"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(seek:positionMs:completion:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(seek:positionMs:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_playerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_positionMs = GetNullableObjectAtIndex(args, 1);
        [api seek:arg_playerId positionMs:arg_positionMs completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.pause"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pause:error:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(pause:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_playerId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api pause:arg_playerId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.stop"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stop:reset:error:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(stop:reset:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_playerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_reset = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api stop:arg_playerId reset:arg_reset error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setVolume"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setVolume:volume:completion:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(setVolume:volume:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_playerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_volume = GetNullableObjectAtIndex(args, 1);
        [api setVolume:arg_playerId volume:arg_volume completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setRepeatMode"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setRepeatMode:repeatMode:completion:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(setRepeatMode:repeatMode:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_playerId = GetNullableObjectAtIndex(args, 0);
        RepeatMode arg_repeatMode = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setRepeatMode:arg_playerId repeatMode:arg_repeatMode completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setSelectedTrack"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSelectedTrack:type:trackId:completion:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(setSelectedTrack:type:trackId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_playerId = GetNullableObjectAtIndex(args, 0);
        TrackType arg_type = [GetNullableObjectAtIndex(args, 1) integerValue];
        NSString *arg_trackId = GetNullableObjectAtIndex(args, 2);
        [api setSelectedTrack:arg_playerId type:arg_type trackId:arg_trackId completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setPlaybackSpeed"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setPlaybackSpeed:speed:completion:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(setPlaybackSpeed:speed:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_playerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_speed = GetNullableObjectAtIndex(args, 1);
        [api setPlaybackSpeed:arg_playerId speed:arg_speed completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.exitFullscreen"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(exitFullscreen:error:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(exitFullscreen:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_playerId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api exitFullscreen:arg_playerId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.enterFullscreen"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(enterFullscreen:error:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(enterFullscreen:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_playerId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api enterFullscreen:arg_playerId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setMixWithOthers"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setMixWithOthers:mixWithOthers:completion:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(setMixWithOthers:mixWithOthers:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_playerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_mixWithOthers = GetNullableObjectAtIndex(args, 1);
        [api setMixWithOthers:arg_playerId mixWithOthers:arg_mixWithOthers completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setNpawConfig"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setNpawConfig:error:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(setNpawConfig:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NpawConfig *arg_config = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setNpawConfig:arg_config error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setAppConfig"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAppConfig:error:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(setAppConfig:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AppConfig *arg_config = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setAppConfig:arg_config error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getTracks"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTracks:completion:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(getTracks:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_playerId = GetNullableObjectAtIndex(args, 0);
        [api getTracks:arg_playerId completion:^(PlayerTracksSnapshot *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getPlayerState"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPlayerState:completion:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(getPlayerState:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_playerId = GetNullableObjectAtIndex(args, 0);
        [api getPlayerState:arg_playerId completion:^(PlayerStateSnapshot *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getChromecastState"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getChromecastState:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(getChromecastState:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getChromecastState:^(ChromecastState *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.openExpandedCastController"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(openExpandedCastController:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(openExpandedCastController:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api openExpandedCastController:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.openCastDialog"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(openCastDialog:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(openCastDialog:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api openCastDialog:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.fetchMediaInfo"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fetchMediaInfo:mimeType:completion:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(fetchMediaInfo:mimeType:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_url = GetNullableObjectAtIndex(args, 0);
        NSString *arg_mimeType = GetNullableObjectAtIndex(args, 1);
        [api fetchMediaInfo:arg_url mimeType:arg_mimeType completion:^(MediaInfo *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getAndroidPerformanceClass"
        binaryMessenger:binaryMessenger
        codec:PlaybackPlatformPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAndroidPerformanceClassWithCompletion:)], @"PlaybackPlatformPigeon api (%@) doesn't respond to @selector(getAndroidPerformanceClassWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getAndroidPerformanceClassWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface PlaybackListenerPigeonCodecReader : FlutterStandardReader
@end
@implementation PlaybackListenerPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [MediaDrmConfiguration fromList:[self readValue]];
    case 129: 
      return [MediaItem fromList:[self readValue]];
    case 130: 
      return [MediaItemTransitionEvent fromList:[self readValue]];
    case 131: 
      return [MediaMetadata fromList:[self readValue]];
    case 132: 
      return [PictureInPictureModeChangedEvent fromList:[self readValue]];
    case 133: 
      return [PlaybackEndedEvent fromList:[self readValue]];
    case 134: 
      return [PlaybackStateChangedEvent fromList:[self readValue]];
    case 135: 
      return [PlayerError fromList:[self readValue]];
    case 136: 
      return [PlayerStateSnapshot fromList:[self readValue]];
    case 137: 
      return [PlayerStateUpdateEvent fromList:[self readValue]];
    case 138: 
      return [PositionDiscontinuityEvent fromList:[self readValue]];
    case 139: 
      return [PrimaryPlayerChangedEvent fromList:[self readValue]];
    case 140: 
      return [VideoSize fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface PlaybackListenerPigeonCodecWriter : FlutterStandardWriter
@end
@implementation PlaybackListenerPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[MediaDrmConfiguration class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[MediaItem class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[MediaItemTransitionEvent class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[MediaMetadata class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PictureInPictureModeChangedEvent class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PlaybackEndedEvent class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PlaybackStateChangedEvent class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PlayerError class]]) {
    [self writeByte:135];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PlayerStateSnapshot class]]) {
    [self writeByte:136];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PlayerStateUpdateEvent class]]) {
    [self writeByte:137];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PositionDiscontinuityEvent class]]) {
    [self writeByte:138];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PrimaryPlayerChangedEvent class]]) {
    [self writeByte:139];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[VideoSize class]]) {
    [self writeByte:140];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface PlaybackListenerPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation PlaybackListenerPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[PlaybackListenerPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[PlaybackListenerPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *PlaybackListenerPigeonGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    PlaybackListenerPigeonCodecReaderWriter *readerWriter = [[PlaybackListenerPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface PlaybackListenerPigeon ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation PlaybackListenerPigeon

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onPrimaryPlayerChanged:(PrimaryPlayerChangedEvent *)arg_event completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPrimaryPlayerChanged"
      binaryMessenger:self.binaryMessenger
      codec:PlaybackListenerPigeonGetCodec()];
  [channel sendMessage:@[arg_event ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onPositionDiscontinuity:(PositionDiscontinuityEvent *)arg_event completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPositionDiscontinuity"
      binaryMessenger:self.binaryMessenger
      codec:PlaybackListenerPigeonGetCodec()];
  [channel sendMessage:@[arg_event ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onPlayerStateUpdate:(PlayerStateUpdateEvent *)arg_event completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlayerStateUpdate"
      binaryMessenger:self.binaryMessenger
      codec:PlaybackListenerPigeonGetCodec()];
  [channel sendMessage:@[arg_event ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onPlaybackStateChanged:(PlaybackStateChangedEvent *)arg_event completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlaybackStateChanged"
      binaryMessenger:self.binaryMessenger
      codec:PlaybackListenerPigeonGetCodec()];
  [channel sendMessage:@[arg_event ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onPlaybackEnded:(PlaybackEndedEvent *)arg_event completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlaybackEnded"
      binaryMessenger:self.binaryMessenger
      codec:PlaybackListenerPigeonGetCodec()];
  [channel sendMessage:@[arg_event ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onMediaItemTransition:(MediaItemTransitionEvent *)arg_event completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onMediaItemTransition"
      binaryMessenger:self.binaryMessenger
      codec:PlaybackListenerPigeonGetCodec()];
  [channel sendMessage:@[arg_event ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onPictureInPictureModeChanged:(PictureInPictureModeChangedEvent *)arg_event completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPictureInPictureModeChanged"
      binaryMessenger:self.binaryMessenger
      codec:PlaybackListenerPigeonGetCodec()];
  [channel sendMessage:@[arg_event ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end

